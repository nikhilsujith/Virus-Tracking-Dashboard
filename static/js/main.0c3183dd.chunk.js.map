{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","service/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","components/Header/Header.jsx","App.js","index.js","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changableUrl","axios","get","destructuredData","console","log","fetchDailyData","map","date","reportDate","total","fetchCountries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","response","fetchService","lineChart","length","labels","datasets","label","borderColor","fill","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","title","Header","classes","AppBar","position","Toolbar","BarChart","fontSize","App","setData","mounted","then","items","fetchedData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c3183dd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react'\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core'\nimport styles from './Cards.module.css'\nimport CountUp from 'react-countup'\nimport cx from 'classnames';\n\nconst Cards = ({data:{ confirmed, recovered, deaths, lastUpdate }}) => {   \n    if(!confirmed){\n        return 'Loading.....';\n    }\n    return (\n        <div className={styles.container}>\n            <Grid container spacing={3} justify=\"center\">\n                <Grid item component={Card} xs={12} md={4} className={cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography color={'textSecondary'} gutterBottom>Infected</Typography>\n                        <Typography variant={'h6'} >\n                            <CountUp\n                                start = {0}\n                                end = {confirmed.value}\n                                duration = {2.5}\n                                separator = \",\"\n                            />\n                        </Typography>\n                        <Typography color={'textSecondary'} >\n                            {new Date(lastUpdate).toDateString()}\n                        </Typography>\n                        <Typography variant={'body2'} >Number of active cases</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={4} className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography color={'textSecondary'} gutterBottom>Recoveries</Typography>\n                        <Typography variant={'h6'} >\n                            <CountUp\n                                start = {0}\n                                end = {recovered.value}\n                                duration = {2.5}\n                                separator = \",\"\n                            />\n                        </Typography>\n                        <Typography color={'textSecondary'} >\n                            {new Date(lastUpdate).toDateString()}\n                        </Typography>\n                        <Typography variant={'body2'} >Number of recoveries</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={4} className={cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography color={'textSecondary'} gutterBottom>Deaths</Typography>\n                        <Typography variant={'h6'} >\n                            <CountUp\n                                start = {0}\n                                end = {deaths.value}\n                                duration = {2.5}\n                                separator = \",\"\n                            />\n                        </Typography>\n                        <Typography color={'textSecondary'} >\n                            {new Date(lastUpdate).toDateString()}\n                        </Typography>\n                        <Typography variant={'body2'} >Number of deaths</Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Cards\n","import axios from 'axios';\nconst url = \"https://covid19.mathdro.id/api\"\n\nexport const fetchData = async (country) => {\n\n  // to facilitate CountryPicker\n  let changableUrl =  url;\n\n    if(country){\n      changableUrl = `${url}/countries/${country}`;\n    }\n\n    try {\n        // once you get the payloads from API\n        // use destructuting to just get the \"data\" part of it\n        // const response = await axios.get(url); -> This gets the entire API\n        const { data: { confirmed, recovered, deaths, lastUpdate } } =  await axios.get(changableUrl);\n\n        const destructuredData = { confirmed, recovered, deaths, lastUpdate, }\n\n        return destructuredData;\n\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n\n// Daily Data from Line Graph\nexport const fetchDailyData = async () => {\n  try {\n    const { data } = await axios.get(`${url}/daily`);\n    // console.log(data)\n    // return data;\n    return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const fetchCountries = async () => {\n    try {\n        // const response = axios.get(`${url}/countries`);\n        const {data: {countries}} = await axios.get(`${url}/countries`);\n\n        return countries.map((country) => country.name);\n    } catch (error) {\n      console.log(error)  \n    }\n}","import React, {useState, useEffect }from 'react'\nimport { fetchDailyData } from '../../service'\nimport { Line, Bar } from 'react-chartjs-2';\n\nimport styles from './Chart.module.css'\n\nconst Chart = () => {\n\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect(() => {\n        const fetchService = async () => {\n            const response = await fetchDailyData();\n            setDailyData(response)\n        }\n\n        // call fetch service\n        fetchService();\n\n    }, [])\n\n    // const [dailyData, setDailyData] = useState([])\n\n    // useEffect (() => {\n    //   let mounted = true;\n    //   fetchData().then(items => {if(mounted){setData(items)}})\n    //   return () => mounted = false;\n    // }, [])\n\n    const lineChart = (\n\n        // if daily data is empty or \"0\" return nul or retuen tLine from Linechart component\n        dailyData.length ? ( // truthy or falsy statement\n            <Line\n            data = {{\n                labels: dailyData.map(({date}) => date),\n                datasets: [{\n                    data: dailyData.map(({ confirmed }) => confirmed),\n                    label: 'Infected',\n                    borderColor: '#3333ff',\n                    fill: true,\n                },{\n                    data: dailyData.map(({ deaths }) => deaths),\n                    label: 'Deaths',\n                    borderColor: 'rgba(255, 0, 0, 0.5)',\n                    fill: true,\n                },\n            ],\n                \n            }}\n        />\n        ) : null\n\n    )\n\n    return (\n        <div className={styles.container}>\n          {lineChart}\n        </div>\n      );\n}\n\nexport default Chart\n","import React, {useState, useEffect }from 'react'\nimport { fetchDailyData } from '../../service'\nimport {NativeSelect, FormControl} from '@material-ui/core'\nimport { fetchCountries } from '../../service'\n\nimport styles from './CountryPicker.module.css'\n\nconst CountryPicker = ({ handleCountryChange }) => {\n\n    const [fetchedCountries, setFetchedCountries] = useState([])\n\n    useEffect(() => {\n        const fetchService = async () => {\n            setFetchedCountries(await fetchCountries());\n        }\n        fetchService();\n\n    },[setFetchedCountries]);\n\n    // console.log(fetchedCountries);\n \n    return (\n        <FormControl className={styles.formControl}>\n            <NativeSelect defaultValue=\"\" onChange={ (e) => handleCountryChange(e.target.value) }>\n                <option value=\"global\">Global</option>\n                {fetchedCountries.map((country, i) => <option key={i} value={country} >{country}</option>)}\n            </NativeSelect>\n        </FormControl>\n    )\n}\n\nexport default CountryPicker","import React from 'react'\n\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { BarChart } from '@material-ui/icons';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nconst Header = () => {\n    const classes = useStyles();\n    return (\n        <AppBar position=\"static\">\n            <Toolbar>\n                {/* <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\"> */}\n                    <BarChart fontSize=\"large\" />\n                {/* </IconButton> */}\n                <Typography variant=\"h6\" className={classes.title}> \n                    Coronavirus Tracking Dashboard\n                </Typography>\n                {/* <Button\n                    variant=\"contained\"\n                    color=\"dark\"\n                    className={classes.button}\n                    // startIcon={<DeleteIcon />}\n                >\n                    Dark Theme\n                </Button> */}\n            </Toolbar>\n        </AppBar>\n    )\n}\n\nexport default Header\n","\nimport {useState, useEffect} from 'react'\nimport {Cards, Chart, CountryPicker, Header} from './components'\nimport styles from './App.module.css';\nimport  { fetchData } from './service'\n\n\nfunction App() {\n\n  // To update geographical global data\n  const [data, setData] = useState([])\n\n  useEffect (() => {\n    let mounted = true;\n    fetchData().then(items => {if(mounted){setData(items)}})\n    return () => mounted = false;\n  }, [])\n\n\n  // To update country specific data\n  const [country, setCountry] = useState()\n  \n  const handleCountryChange = async (country ) => {\n    const fetchedData = await fetchData(country);\n    // return fetchedData\n    console.log(fetchedData);\n  }\n\n  \n  return (\n    <div className={styles.container}>\n      <Header />\n      <Cards data={data}/>  \n      <CountryPicker handleCountryChange={handleCountryChange}/>\n      <Chart />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CountryPicker_container__2vyxG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};"],"sourceRoot":""}